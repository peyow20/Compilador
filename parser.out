Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARR
    ARRAY

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM vars bloque
Rule 2     vars -> VAR id DOSPUN TIPO PUNCOM asignacion_id
Rule 3     id -> ID acum_id
Rule 4     acum_id -> COMA ID acum_id
Rule 5     acum_id -> empty
Rule 6     asignacion_id -> id DOSPUN TIPO PUNCOM asignacion_id
Rule 7     asignacion_id -> empty
Rule 8     array -> ID CORCHIZQ exp CORCHDER
Rule 9     array_init -> array IGUAL CORCHIZQ lista_exp CORCHDER
Rule 10    lista_exp -> expresion multiples_exp
Rule 11    multiples_exp -> COMA expresion multiples_exp
Rule 12    multiples_exp -> empty
Rule 13    TIPO -> INT
Rule 14    TIPO -> FLOAT
Rule 15    TIPO -> BOOL
Rule 16    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 17    estatuto -> asignacion
Rule 18    estatuto -> condicion_if
Rule 19    estatuto -> condicion_while
Rule 20    estatuto -> escritura
Rule 21    multiples_estatutos -> estatuto multiples_estatutos
Rule 22    multiples_estatutos -> empty
Rule 23    INCREMENTO -> MAS MAS
Rule 24    DECREMENTO -> MENOS MENOS
Rule 25    asignacion -> ID IGUAL expresion PUNCOM
Rule 26    asignacion -> ID INCREMENTO PUNCOM
Rule 27    asignacion -> ID DECREMENTO PUNCOM
Rule 28    expresion -> expresion AND expresion
Rule 29    expresion -> expresion OR expresion
Rule 30    escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM
Rule 31    print_expresion -> expresion multiples_print
Rule 32    print_expresion -> CTESTRING multiples_print
Rule 33    multiples_print -> COMA print_expresion
Rule 34    multiples_print -> empty
Rule 35    condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM
Rule 36    condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
Rule 37    else_condicion -> ELSE bloque
Rule 38    condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM
Rule 39    expresion -> exp
Rule 40    expresion -> exp MAYOR exp
Rule 41    expresion -> exp MENOR exp
Rule 42    expresion -> exp DIFF exp
Rule 43    expresion -> exp mas_igual exp
Rule 44    expresion -> exp menor_igual exp
Rule 45    mas_igual -> MAYOR IGUAL
Rule 46    menor_igual -> MENOR IGUAL
Rule 47    exp -> termino exp_operacion
Rule 48    exp_operacion -> MAS termino exp_operacion
Rule 49    exp_operacion -> MENOS termino exp_operacion
Rule 50    exp_operacion -> empty
Rule 51    termino -> factor termino_operador
Rule 52    termino_operador -> POR factor termino_operador
Rule 53    termino_operador -> DIV factor termino_operador
Rule 54    termino_operador -> MOD factor termino_operador
Rule 55    termino_operador -> empty
Rule 56    factor -> PARIZQ expresion PARDER
Rule 57    factor -> MAS var_cte
Rule 58    factor -> MENOS var_cte
Rule 59    factor -> var_cte
Rule 60    factor -> empty
Rule 61    var_cte -> ID
Rule 62    var_cte -> CTEI
Rule 63    var_cte -> CTEF
Rule 64    var_cte -> CTEB
Rule 65    empty -> <empty>

Terminals, with rules where they appear

AND                  : 28
ARR                  : 
ARRAY                : 
BOOL                 : 15
COMA                 : 4 11 33
CORCHDER             : 8 9
CORCHIZQ             : 8 9
CTEB                 : 64
CTEF                 : 63
CTEI                 : 62
CTESTRING            : 32
DIFF                 : 42
DIV                  : 53
DOSPUN               : 2 6
ELSE                 : 37
FLOAT                : 14
ID                   : 1 3 4 8 25 26 27 61
IF                   : 35 36
IGUAL                : 9 25 45 46
INT                  : 13
LLAVDER              : 16
LLAVIZQ              : 16
MAS                  : 23 23 48 57
MAYOR                : 40 45
MENOR                : 41 46
MENOS                : 24 24 49 58
MOD                  : 54
OR                   : 29
PARDER               : 30 35 36 38 56
PARIZQ               : 30 35 36 38 56
POR                  : 52
PRINT                : 30
PROGRAM              : 1
PUNCOM               : 1 2 6 25 26 27 30 35 36 38
VAR                  : 2
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

DECREMENTO           : 27
INCREMENTO           : 26
TIPO                 : 2 6
acum_id              : 3 4
array                : 9
array_init           : 
asignacion           : 17
asignacion_id        : 2 6
bloque               : 1 35 36 37 38
condicion_if         : 18
condicion_while      : 19
else_condicion       : 36
empty                : 5 7 12 22 34 50 55 60
escritura            : 20
estatuto             : 21
exp                  : 8 39 40 40 41 41 42 42 43 43 44 44
exp_operacion        : 47 48 49
expresion            : 10 11 25 28 28 29 29 31 35 36 38 56
factor               : 51 52 53 54
id                   : 2 6
lista_exp            : 9
mas_igual            : 43
menor_igual          : 44
multiples_estatutos  : 16 21
multiples_exp        : 10 11
multiples_print      : 31 32
print_expresion      : 30 33
program              : 0
termino              : 47 48 49
termino_operador     : 51 52 53 54
var_cte              : 57 58 59
vars                 : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM vars bloque

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM vars bloque

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM vars bloque

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . vars bloque
    (2) vars -> . VAR id DOSPUN TIPO PUNCOM asignacion_id

    VAR             shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID PUNCOM vars . bloque
    (16) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 8

    bloque                         shift and go to state 7

state 6

    (2) vars -> VAR . id DOSPUN TIPO PUNCOM asignacion_id
    (3) id -> . ID acum_id

    ID              shift and go to state 10

    id                             shift and go to state 9

state 7

    (1) program -> PROGRAM ID PUNCOM vars bloque .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM vars bloque .)


state 8

    (16) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (21) multiples_estatutos -> . estatuto multiples_estatutos
    (22) multiples_estatutos -> . empty
    (17) estatuto -> . asignacion
    (18) estatuto -> . condicion_if
    (19) estatuto -> . condicion_while
    (20) estatuto -> . escritura
    (65) empty -> .
    (25) asignacion -> . ID IGUAL expresion PUNCOM
    (26) asignacion -> . ID INCREMENTO PUNCOM
    (27) asignacion -> . ID DECREMENTO PUNCOM
    (35) condicion_if -> . IF PARIZQ expresion PARDER bloque PUNCOM
    (36) condicion_if -> . IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
    (38) condicion_while -> . WHILE PARIZQ expresion PARDER bloque PUNCOM
    (30) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM

    LLAVDER         reduce using rule 65 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    PRINT           shift and go to state 21

    multiples_estatutos            shift and go to state 11
    estatuto                       shift and go to state 12
    empty                          shift and go to state 13
    asignacion                     shift and go to state 14
    condicion_if                   shift and go to state 15
    condicion_while                shift and go to state 16
    escritura                      shift and go to state 17

state 9

    (2) vars -> VAR id . DOSPUN TIPO PUNCOM asignacion_id

    DOSPUN          shift and go to state 22


state 10

    (3) id -> ID . acum_id
    (4) acum_id -> . COMA ID acum_id
    (5) acum_id -> . empty
    (65) empty -> .

    COMA            shift and go to state 24
    DOSPUN          reduce using rule 65 (empty -> .)

    acum_id                        shift and go to state 23
    empty                          shift and go to state 25

state 11

    (16) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 26


state 12

    (21) multiples_estatutos -> estatuto . multiples_estatutos
    (21) multiples_estatutos -> . estatuto multiples_estatutos
    (22) multiples_estatutos -> . empty
    (17) estatuto -> . asignacion
    (18) estatuto -> . condicion_if
    (19) estatuto -> . condicion_while
    (20) estatuto -> . escritura
    (65) empty -> .
    (25) asignacion -> . ID IGUAL expresion PUNCOM
    (26) asignacion -> . ID INCREMENTO PUNCOM
    (27) asignacion -> . ID DECREMENTO PUNCOM
    (35) condicion_if -> . IF PARIZQ expresion PARDER bloque PUNCOM
    (36) condicion_if -> . IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
    (38) condicion_while -> . WHILE PARIZQ expresion PARDER bloque PUNCOM
    (30) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM

    LLAVDER         reduce using rule 65 (empty -> .)
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    PRINT           shift and go to state 21

    estatuto                       shift and go to state 12
    multiples_estatutos            shift and go to state 27
    empty                          shift and go to state 13
    asignacion                     shift and go to state 14
    condicion_if                   shift and go to state 15
    condicion_while                shift and go to state 16
    escritura                      shift and go to state 17

state 13

    (22) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 22 (multiples_estatutos -> empty .)


state 14

    (17) estatuto -> asignacion .

    ID              reduce using rule 17 (estatuto -> asignacion .)
    IF              reduce using rule 17 (estatuto -> asignacion .)
    WHILE           reduce using rule 17 (estatuto -> asignacion .)
    PRINT           reduce using rule 17 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 17 (estatuto -> asignacion .)


state 15

    (18) estatuto -> condicion_if .

    ID              reduce using rule 18 (estatuto -> condicion_if .)
    IF              reduce using rule 18 (estatuto -> condicion_if .)
    WHILE           reduce using rule 18 (estatuto -> condicion_if .)
    PRINT           reduce using rule 18 (estatuto -> condicion_if .)
    LLAVDER         reduce using rule 18 (estatuto -> condicion_if .)


state 16

    (19) estatuto -> condicion_while .

    ID              reduce using rule 19 (estatuto -> condicion_while .)
    IF              reduce using rule 19 (estatuto -> condicion_while .)
    WHILE           reduce using rule 19 (estatuto -> condicion_while .)
    PRINT           reduce using rule 19 (estatuto -> condicion_while .)
    LLAVDER         reduce using rule 19 (estatuto -> condicion_while .)


state 17

    (20) estatuto -> escritura .

    ID              reduce using rule 20 (estatuto -> escritura .)
    IF              reduce using rule 20 (estatuto -> escritura .)
    WHILE           reduce using rule 20 (estatuto -> escritura .)
    PRINT           reduce using rule 20 (estatuto -> escritura .)
    LLAVDER         reduce using rule 20 (estatuto -> escritura .)


state 18

    (25) asignacion -> ID . IGUAL expresion PUNCOM
    (26) asignacion -> ID . INCREMENTO PUNCOM
    (27) asignacion -> ID . DECREMENTO PUNCOM
    (23) INCREMENTO -> . MAS MAS
    (24) DECREMENTO -> . MENOS MENOS

    IGUAL           shift and go to state 28
    MAS             shift and go to state 31
    MENOS           shift and go to state 32

    INCREMENTO                     shift and go to state 29
    DECREMENTO                     shift and go to state 30

state 19

    (35) condicion_if -> IF . PARIZQ expresion PARDER bloque PUNCOM
    (36) condicion_if -> IF . PARIZQ expresion PARDER bloque else_condicion PUNCOM

    PARIZQ          shift and go to state 33


state 20

    (38) condicion_while -> WHILE . PARIZQ expresion PARDER bloque PUNCOM

    PARIZQ          shift and go to state 34


state 21

    (30) escritura -> PRINT . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 35


state 22

    (2) vars -> VAR id DOSPUN . TIPO PUNCOM asignacion_id
    (13) TIPO -> . INT
    (14) TIPO -> . FLOAT
    (15) TIPO -> . BOOL

    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    BOOL            shift and go to state 39

    TIPO                           shift and go to state 36

state 23

    (3) id -> ID acum_id .

    DOSPUN          reduce using rule 3 (id -> ID acum_id .)


state 24

    (4) acum_id -> COMA . ID acum_id

    ID              shift and go to state 40


state 25

    (5) acum_id -> empty .

    DOSPUN          reduce using rule 5 (acum_id -> empty .)


state 26

    (16) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 16 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 16 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 16 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 27

    (21) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 21 (multiples_estatutos -> estatuto multiples_estatutos .)


state 28

    (25) asignacion -> ID IGUAL . expresion PUNCOM
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 42
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 29

    (26) asignacion -> ID INCREMENTO . PUNCOM

    PUNCOM          shift and go to state 54


state 30

    (27) asignacion -> ID DECREMENTO . PUNCOM

    PUNCOM          shift and go to state 55


state 31

    (23) INCREMENTO -> MAS . MAS

    MAS             shift and go to state 56


state 32

    (24) DECREMENTO -> MENOS . MENOS

    MENOS           shift and go to state 57


state 33

    (35) condicion_if -> IF PARIZQ . expresion PARDER bloque PUNCOM
    (36) condicion_if -> IF PARIZQ . expresion PARDER bloque else_condicion PUNCOM
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 58
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 34

    (38) condicion_while -> WHILE PARIZQ . expresion PARDER bloque PUNCOM
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 59
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 35

    (30) escritura -> PRINT PARIZQ . print_expresion PARDER PUNCOM
    (31) print_expresion -> . expresion multiples_print
    (32) print_expresion -> . CTESTRING multiples_print
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 62
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    print_expresion                shift and go to state 60
    expresion                      shift and go to state 61
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 36

    (2) vars -> VAR id DOSPUN TIPO . PUNCOM asignacion_id

    PUNCOM          shift and go to state 63


state 37

    (13) TIPO -> INT .

    PUNCOM          reduce using rule 13 (TIPO -> INT .)


state 38

    (14) TIPO -> FLOAT .

    PUNCOM          reduce using rule 14 (TIPO -> FLOAT .)


state 39

    (15) TIPO -> BOOL .

    PUNCOM          reduce using rule 15 (TIPO -> BOOL .)


state 40

    (4) acum_id -> COMA ID . acum_id
    (4) acum_id -> . COMA ID acum_id
    (5) acum_id -> . empty
    (65) empty -> .

    COMA            shift and go to state 24
    DOSPUN          reduce using rule 65 (empty -> .)

    acum_id                        shift and go to state 64
    empty                          shift and go to state 25

state 41

    (61) var_cte -> ID .

    POR             reduce using rule 61 (var_cte -> ID .)
    DIV             reduce using rule 61 (var_cte -> ID .)
    MOD             reduce using rule 61 (var_cte -> ID .)
    MAS             reduce using rule 61 (var_cte -> ID .)
    MENOS           reduce using rule 61 (var_cte -> ID .)
    MAYOR           reduce using rule 61 (var_cte -> ID .)
    MENOR           reduce using rule 61 (var_cte -> ID .)
    DIFF            reduce using rule 61 (var_cte -> ID .)
    PUNCOM          reduce using rule 61 (var_cte -> ID .)
    AND             reduce using rule 61 (var_cte -> ID .)
    OR              reduce using rule 61 (var_cte -> ID .)
    PARDER          reduce using rule 61 (var_cte -> ID .)
    COMA            reduce using rule 61 (var_cte -> ID .)


state 42

    (25) asignacion -> ID IGUAL expresion . PUNCOM
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 43

    (39) expresion -> exp .
    (40) expresion -> exp . MAYOR exp
    (41) expresion -> exp . MENOR exp
    (42) expresion -> exp . DIFF exp
    (43) expresion -> exp . mas_igual exp
    (44) expresion -> exp . menor_igual exp
    (45) mas_igual -> . MAYOR IGUAL
    (46) menor_igual -> . MENOR IGUAL

    PUNCOM          reduce using rule 39 (expresion -> exp .)
    AND             reduce using rule 39 (expresion -> exp .)
    OR              reduce using rule 39 (expresion -> exp .)
    PARDER          reduce using rule 39 (expresion -> exp .)
    COMA            reduce using rule 39 (expresion -> exp .)
    MAYOR           shift and go to state 68
    MENOR           shift and go to state 69
    DIFF            shift and go to state 70

    mas_igual                      shift and go to state 71
    menor_igual                    shift and go to state 72

state 44

    (47) exp -> termino . exp_operacion
    (48) exp_operacion -> . MAS termino exp_operacion
    (49) exp_operacion -> . MENOS termino exp_operacion
    (50) exp_operacion -> . empty
    (65) empty -> .

    MAS             shift and go to state 74
    MENOS           shift and go to state 75
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    exp_operacion                  shift and go to state 73
    empty                          shift and go to state 76

state 45

    (51) termino -> factor . termino_operador
    (52) termino_operador -> . POR factor termino_operador
    (53) termino_operador -> . DIV factor termino_operador
    (54) termino_operador -> . MOD factor termino_operador
    (55) termino_operador -> . empty
    (65) empty -> .

    POR             shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    termino_operador               shift and go to state 77
    empty                          shift and go to state 81

state 46

    (56) factor -> PARIZQ . expresion PARDER
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 82
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 47

    (57) factor -> MAS . var_cte
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB

    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53

    var_cte                        shift and go to state 83

state 48

    (59) factor -> var_cte .

    POR             reduce using rule 59 (factor -> var_cte .)
    DIV             reduce using rule 59 (factor -> var_cte .)
    MOD             reduce using rule 59 (factor -> var_cte .)
    MAS             reduce using rule 59 (factor -> var_cte .)
    MENOS           reduce using rule 59 (factor -> var_cte .)
    MAYOR           reduce using rule 59 (factor -> var_cte .)
    MENOR           reduce using rule 59 (factor -> var_cte .)
    DIFF            reduce using rule 59 (factor -> var_cte .)
    PUNCOM          reduce using rule 59 (factor -> var_cte .)
    AND             reduce using rule 59 (factor -> var_cte .)
    OR              reduce using rule 59 (factor -> var_cte .)
    PARDER          reduce using rule 59 (factor -> var_cte .)
    COMA            reduce using rule 59 (factor -> var_cte .)


state 49

    (58) factor -> MENOS . var_cte
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB

    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53

    var_cte                        shift and go to state 84

state 50

    (60) factor -> empty .

    POR             reduce using rule 60 (factor -> empty .)
    DIV             reduce using rule 60 (factor -> empty .)
    MOD             reduce using rule 60 (factor -> empty .)
    MAS             reduce using rule 60 (factor -> empty .)
    MENOS           reduce using rule 60 (factor -> empty .)
    MAYOR           reduce using rule 60 (factor -> empty .)
    MENOR           reduce using rule 60 (factor -> empty .)
    DIFF            reduce using rule 60 (factor -> empty .)
    PUNCOM          reduce using rule 60 (factor -> empty .)
    AND             reduce using rule 60 (factor -> empty .)
    OR              reduce using rule 60 (factor -> empty .)
    PARDER          reduce using rule 60 (factor -> empty .)
    COMA            reduce using rule 60 (factor -> empty .)


state 51

    (62) var_cte -> CTEI .

    POR             reduce using rule 62 (var_cte -> CTEI .)
    DIV             reduce using rule 62 (var_cte -> CTEI .)
    MOD             reduce using rule 62 (var_cte -> CTEI .)
    MAS             reduce using rule 62 (var_cte -> CTEI .)
    MENOS           reduce using rule 62 (var_cte -> CTEI .)
    MAYOR           reduce using rule 62 (var_cte -> CTEI .)
    MENOR           reduce using rule 62 (var_cte -> CTEI .)
    DIFF            reduce using rule 62 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 62 (var_cte -> CTEI .)
    AND             reduce using rule 62 (var_cte -> CTEI .)
    OR              reduce using rule 62 (var_cte -> CTEI .)
    PARDER          reduce using rule 62 (var_cte -> CTEI .)
    COMA            reduce using rule 62 (var_cte -> CTEI .)


state 52

    (63) var_cte -> CTEF .

    POR             reduce using rule 63 (var_cte -> CTEF .)
    DIV             reduce using rule 63 (var_cte -> CTEF .)
    MOD             reduce using rule 63 (var_cte -> CTEF .)
    MAS             reduce using rule 63 (var_cte -> CTEF .)
    MENOS           reduce using rule 63 (var_cte -> CTEF .)
    MAYOR           reduce using rule 63 (var_cte -> CTEF .)
    MENOR           reduce using rule 63 (var_cte -> CTEF .)
    DIFF            reduce using rule 63 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 63 (var_cte -> CTEF .)
    AND             reduce using rule 63 (var_cte -> CTEF .)
    OR              reduce using rule 63 (var_cte -> CTEF .)
    PARDER          reduce using rule 63 (var_cte -> CTEF .)
    COMA            reduce using rule 63 (var_cte -> CTEF .)


state 53

    (64) var_cte -> CTEB .

    POR             reduce using rule 64 (var_cte -> CTEB .)
    DIV             reduce using rule 64 (var_cte -> CTEB .)
    MOD             reduce using rule 64 (var_cte -> CTEB .)
    MAS             reduce using rule 64 (var_cte -> CTEB .)
    MENOS           reduce using rule 64 (var_cte -> CTEB .)
    MAYOR           reduce using rule 64 (var_cte -> CTEB .)
    MENOR           reduce using rule 64 (var_cte -> CTEB .)
    DIFF            reduce using rule 64 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 64 (var_cte -> CTEB .)
    AND             reduce using rule 64 (var_cte -> CTEB .)
    OR              reduce using rule 64 (var_cte -> CTEB .)
    PARDER          reduce using rule 64 (var_cte -> CTEB .)
    COMA            reduce using rule 64 (var_cte -> CTEB .)


state 54

    (26) asignacion -> ID INCREMENTO PUNCOM .

    ID              reduce using rule 26 (asignacion -> ID INCREMENTO PUNCOM .)
    IF              reduce using rule 26 (asignacion -> ID INCREMENTO PUNCOM .)
    WHILE           reduce using rule 26 (asignacion -> ID INCREMENTO PUNCOM .)
    PRINT           reduce using rule 26 (asignacion -> ID INCREMENTO PUNCOM .)
    LLAVDER         reduce using rule 26 (asignacion -> ID INCREMENTO PUNCOM .)


state 55

    (27) asignacion -> ID DECREMENTO PUNCOM .

    ID              reduce using rule 27 (asignacion -> ID DECREMENTO PUNCOM .)
    IF              reduce using rule 27 (asignacion -> ID DECREMENTO PUNCOM .)
    WHILE           reduce using rule 27 (asignacion -> ID DECREMENTO PUNCOM .)
    PRINT           reduce using rule 27 (asignacion -> ID DECREMENTO PUNCOM .)
    LLAVDER         reduce using rule 27 (asignacion -> ID DECREMENTO PUNCOM .)


state 56

    (23) INCREMENTO -> MAS MAS .

    PUNCOM          reduce using rule 23 (INCREMENTO -> MAS MAS .)


state 57

    (24) DECREMENTO -> MENOS MENOS .

    PUNCOM          reduce using rule 24 (DECREMENTO -> MENOS MENOS .)


state 58

    (35) condicion_if -> IF PARIZQ expresion . PARDER bloque PUNCOM
    (36) condicion_if -> IF PARIZQ expresion . PARDER bloque else_condicion PUNCOM
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

    PARDER          shift and go to state 85
    AND             shift and go to state 66
    OR              shift and go to state 67


state 59

    (38) condicion_while -> WHILE PARIZQ expresion . PARDER bloque PUNCOM
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

    PARDER          shift and go to state 86
    AND             shift and go to state 66
    OR              shift and go to state 67


state 60

    (30) escritura -> PRINT PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 87


state 61

    (31) print_expresion -> expresion . multiples_print
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion
    (33) multiples_print -> . COMA print_expresion
    (34) multiples_print -> . empty
    (65) empty -> .

    AND             shift and go to state 66
    OR              shift and go to state 67
    COMA            shift and go to state 89
    PARDER          reduce using rule 65 (empty -> .)

    multiples_print                shift and go to state 88
    empty                          shift and go to state 90

state 62

    (32) print_expresion -> CTESTRING . multiples_print
    (33) multiples_print -> . COMA print_expresion
    (34) multiples_print -> . empty
    (65) empty -> .

    COMA            shift and go to state 89
    PARDER          reduce using rule 65 (empty -> .)

    multiples_print                shift and go to state 91
    empty                          shift and go to state 90

state 63

    (2) vars -> VAR id DOSPUN TIPO PUNCOM . asignacion_id
    (6) asignacion_id -> . id DOSPUN TIPO PUNCOM asignacion_id
    (7) asignacion_id -> . empty
    (3) id -> . ID acum_id
    (65) empty -> .

    ID              shift and go to state 10
    LLAVIZQ         reduce using rule 65 (empty -> .)

    id                             shift and go to state 92
    asignacion_id                  shift and go to state 93
    empty                          shift and go to state 94

state 64

    (4) acum_id -> COMA ID acum_id .

    DOSPUN          reduce using rule 4 (acum_id -> COMA ID acum_id .)


state 65

    (25) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 25 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 25 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 25 (asignacion -> ID IGUAL expresion PUNCOM .)
    PRINT           reduce using rule 25 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 25 (asignacion -> ID IGUAL expresion PUNCOM .)


state 66

    (28) expresion -> expresion AND . expresion
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 95
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 67

    (29) expresion -> expresion OR . expresion
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    expresion                      shift and go to state 96
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 68

    (40) expresion -> exp MAYOR . exp
    (45) mas_igual -> MAYOR . IGUAL
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    IGUAL           shift and go to state 98
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 97
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 69

    (41) expresion -> exp MENOR . exp
    (46) menor_igual -> MENOR . IGUAL
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    IGUAL           shift and go to state 100
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 99
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 70

    (42) expresion -> exp DIFF . exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 101
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 71

    (43) expresion -> exp mas_igual . exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 102
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 72

    (44) expresion -> exp menor_igual . exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    exp                            shift and go to state 103
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 73

    (47) exp -> termino exp_operacion .

    MAYOR           reduce using rule 47 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 47 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 47 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 47 (exp -> termino exp_operacion .)
    AND             reduce using rule 47 (exp -> termino exp_operacion .)
    OR              reduce using rule 47 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 47 (exp -> termino exp_operacion .)
    COMA            reduce using rule 47 (exp -> termino exp_operacion .)


state 74

    (48) exp_operacion -> MAS . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    termino                        shift and go to state 104
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 75

    (49) exp_operacion -> MENOS . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    termino                        shift and go to state 105
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 76

    (50) exp_operacion -> empty .

    MAYOR           reduce using rule 50 (exp_operacion -> empty .)
    MENOR           reduce using rule 50 (exp_operacion -> empty .)
    DIFF            reduce using rule 50 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 50 (exp_operacion -> empty .)
    AND             reduce using rule 50 (exp_operacion -> empty .)
    OR              reduce using rule 50 (exp_operacion -> empty .)
    PARDER          reduce using rule 50 (exp_operacion -> empty .)
    COMA            reduce using rule 50 (exp_operacion -> empty .)


state 77

    (51) termino -> factor termino_operador .

    MAS             reduce using rule 51 (termino -> factor termino_operador .)
    MENOS           reduce using rule 51 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 51 (termino -> factor termino_operador .)
    MENOR           reduce using rule 51 (termino -> factor termino_operador .)
    DIFF            reduce using rule 51 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 51 (termino -> factor termino_operador .)
    AND             reduce using rule 51 (termino -> factor termino_operador .)
    OR              reduce using rule 51 (termino -> factor termino_operador .)
    PARDER          reduce using rule 51 (termino -> factor termino_operador .)
    COMA            reduce using rule 51 (termino -> factor termino_operador .)


state 78

    (52) termino_operador -> POR . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    factor                         shift and go to state 106
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 79

    (53) termino_operador -> DIV . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    factor                         shift and go to state 107
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 80

    (54) termino_operador -> MOD . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    factor                         shift and go to state 108
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 81

    (55) termino_operador -> empty .

    MAS             reduce using rule 55 (termino_operador -> empty .)
    MENOS           reduce using rule 55 (termino_operador -> empty .)
    MAYOR           reduce using rule 55 (termino_operador -> empty .)
    MENOR           reduce using rule 55 (termino_operador -> empty .)
    DIFF            reduce using rule 55 (termino_operador -> empty .)
    PUNCOM          reduce using rule 55 (termino_operador -> empty .)
    AND             reduce using rule 55 (termino_operador -> empty .)
    OR              reduce using rule 55 (termino_operador -> empty .)
    PARDER          reduce using rule 55 (termino_operador -> empty .)
    COMA            reduce using rule 55 (termino_operador -> empty .)


state 82

    (56) factor -> PARIZQ expresion . PARDER
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

    PARDER          shift and go to state 109
    AND             shift and go to state 66
    OR              shift and go to state 67


state 83

    (57) factor -> MAS var_cte .

    POR             reduce using rule 57 (factor -> MAS var_cte .)
    DIV             reduce using rule 57 (factor -> MAS var_cte .)
    MOD             reduce using rule 57 (factor -> MAS var_cte .)
    MAS             reduce using rule 57 (factor -> MAS var_cte .)
    MENOS           reduce using rule 57 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 57 (factor -> MAS var_cte .)
    MENOR           reduce using rule 57 (factor -> MAS var_cte .)
    DIFF            reduce using rule 57 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 57 (factor -> MAS var_cte .)
    AND             reduce using rule 57 (factor -> MAS var_cte .)
    OR              reduce using rule 57 (factor -> MAS var_cte .)
    PARDER          reduce using rule 57 (factor -> MAS var_cte .)
    COMA            reduce using rule 57 (factor -> MAS var_cte .)


state 84

    (58) factor -> MENOS var_cte .

    POR             reduce using rule 58 (factor -> MENOS var_cte .)
    DIV             reduce using rule 58 (factor -> MENOS var_cte .)
    MOD             reduce using rule 58 (factor -> MENOS var_cte .)
    MAS             reduce using rule 58 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 58 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 58 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 58 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 58 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 58 (factor -> MENOS var_cte .)
    AND             reduce using rule 58 (factor -> MENOS var_cte .)
    OR              reduce using rule 58 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 58 (factor -> MENOS var_cte .)
    COMA            reduce using rule 58 (factor -> MENOS var_cte .)


state 85

    (35) condicion_if -> IF PARIZQ expresion PARDER . bloque PUNCOM
    (36) condicion_if -> IF PARIZQ expresion PARDER . bloque else_condicion PUNCOM
    (16) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 8

    bloque                         shift and go to state 110

state 86

    (38) condicion_while -> WHILE PARIZQ expresion PARDER . bloque PUNCOM
    (16) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 8

    bloque                         shift and go to state 111

state 87

    (30) escritura -> PRINT PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 112


state 88

    (31) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 31 (print_expresion -> expresion multiples_print .)


state 89

    (33) multiples_print -> COMA . print_expresion
    (31) print_expresion -> . expresion multiples_print
    (32) print_expresion -> . CTESTRING multiples_print
    (28) expresion -> . expresion AND expresion
    (29) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp mas_igual exp
    (44) expresion -> . exp menor_igual exp
    (47) exp -> . termino exp_operacion
    (51) termino -> . factor termino_operador
    (56) factor -> . PARIZQ expresion PARDER
    (57) factor -> . MAS var_cte
    (58) factor -> . MENOS var_cte
    (59) factor -> . var_cte
    (60) factor -> . empty
    (61) var_cte -> . ID
    (62) var_cte -> . CTEI
    (63) var_cte -> . CTEF
    (64) var_cte -> . CTEB
    (65) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 62
    PARIZQ          shift and go to state 46
    MAS             shift and go to state 47
    MENOS           shift and go to state 49
    ID              shift and go to state 41
    CTEI            shift and go to state 51
    CTEF            shift and go to state 52
    CTEB            shift and go to state 53
    POR             reduce using rule 65 (empty -> .)
    DIV             reduce using rule 65 (empty -> .)
    MOD             reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)

  ! MAS             [ reduce using rule 65 (empty -> .) ]
  ! MENOS           [ reduce using rule 65 (empty -> .) ]

    print_expresion                shift and go to state 113
    expresion                      shift and go to state 61
    exp                            shift and go to state 43
    termino                        shift and go to state 44
    factor                         shift and go to state 45
    var_cte                        shift and go to state 48
    empty                          shift and go to state 50

state 90

    (34) multiples_print -> empty .

    PARDER          reduce using rule 34 (multiples_print -> empty .)


state 91

    (32) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 32 (print_expresion -> CTESTRING multiples_print .)


state 92

    (6) asignacion_id -> id . DOSPUN TIPO PUNCOM asignacion_id

    DOSPUN          shift and go to state 114


state 93

    (2) vars -> VAR id DOSPUN TIPO PUNCOM asignacion_id .

    LLAVIZQ         reduce using rule 2 (vars -> VAR id DOSPUN TIPO PUNCOM asignacion_id .)


state 94

    (7) asignacion_id -> empty .

    LLAVIZQ         reduce using rule 7 (asignacion_id -> empty .)


state 95

    (28) expresion -> expresion AND expresion .
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 28 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 28 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 28 (expresion -> expresion AND expresion .)
    AND             shift and go to state 66
    OR              shift and go to state 67

  ! AND             [ reduce using rule 28 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 28 (expresion -> expresion AND expresion .) ]


state 96

    (29) expresion -> expresion OR expresion .
    (28) expresion -> expresion . AND expresion
    (29) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 29 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 29 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 29 (expresion -> expresion OR expresion .)
    AND             shift and go to state 66
    OR              shift and go to state 67

  ! AND             [ reduce using rule 29 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 29 (expresion -> expresion OR expresion .) ]


state 97

    (40) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 40 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 40 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 40 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 40 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 40 (expresion -> exp MAYOR exp .)


state 98

    (45) mas_igual -> MAYOR IGUAL .

    PARIZQ          reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    MAS             reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    MENOS           reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    ID              reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    CTEI            reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    CTEF            reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    CTEB            reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    POR             reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    DIV             reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    MOD             reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    PUNCOM          reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    AND             reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    OR              reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    PARDER          reduce using rule 45 (mas_igual -> MAYOR IGUAL .)
    COMA            reduce using rule 45 (mas_igual -> MAYOR IGUAL .)


state 99

    (41) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 41 (expresion -> exp MENOR exp .)
    AND             reduce using rule 41 (expresion -> exp MENOR exp .)
    OR              reduce using rule 41 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 41 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 41 (expresion -> exp MENOR exp .)


state 100

    (46) menor_igual -> MENOR IGUAL .

    PARIZQ          reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    MAS             reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    MENOS           reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    ID              reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    CTEI            reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    CTEF            reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    CTEB            reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    POR             reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    DIV             reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    MOD             reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    PUNCOM          reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    AND             reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    OR              reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    PARDER          reduce using rule 46 (menor_igual -> MENOR IGUAL .)
    COMA            reduce using rule 46 (menor_igual -> MENOR IGUAL .)


state 101

    (42) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 42 (expresion -> exp DIFF exp .)
    AND             reduce using rule 42 (expresion -> exp DIFF exp .)
    OR              reduce using rule 42 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 42 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 42 (expresion -> exp DIFF exp .)


state 102

    (43) expresion -> exp mas_igual exp .

    PUNCOM          reduce using rule 43 (expresion -> exp mas_igual exp .)
    AND             reduce using rule 43 (expresion -> exp mas_igual exp .)
    OR              reduce using rule 43 (expresion -> exp mas_igual exp .)
    PARDER          reduce using rule 43 (expresion -> exp mas_igual exp .)
    COMA            reduce using rule 43 (expresion -> exp mas_igual exp .)


state 103

    (44) expresion -> exp menor_igual exp .

    PUNCOM          reduce using rule 44 (expresion -> exp menor_igual exp .)
    AND             reduce using rule 44 (expresion -> exp menor_igual exp .)
    OR              reduce using rule 44 (expresion -> exp menor_igual exp .)
    PARDER          reduce using rule 44 (expresion -> exp menor_igual exp .)
    COMA            reduce using rule 44 (expresion -> exp menor_igual exp .)


state 104

    (48) exp_operacion -> MAS termino . exp_operacion
    (48) exp_operacion -> . MAS termino exp_operacion
    (49) exp_operacion -> . MENOS termino exp_operacion
    (50) exp_operacion -> . empty
    (65) empty -> .

    MAS             shift and go to state 74
    MENOS           shift and go to state 75
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    exp_operacion                  shift and go to state 115
    empty                          shift and go to state 76

state 105

    (49) exp_operacion -> MENOS termino . exp_operacion
    (48) exp_operacion -> . MAS termino exp_operacion
    (49) exp_operacion -> . MENOS termino exp_operacion
    (50) exp_operacion -> . empty
    (65) empty -> .

    MAS             shift and go to state 74
    MENOS           shift and go to state 75
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    exp_operacion                  shift and go to state 116
    empty                          shift and go to state 76

state 106

    (52) termino_operador -> POR factor . termino_operador
    (52) termino_operador -> . POR factor termino_operador
    (53) termino_operador -> . DIV factor termino_operador
    (54) termino_operador -> . MOD factor termino_operador
    (55) termino_operador -> . empty
    (65) empty -> .

    POR             shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    termino_operador               shift and go to state 117
    empty                          shift and go to state 81

state 107

    (53) termino_operador -> DIV factor . termino_operador
    (52) termino_operador -> . POR factor termino_operador
    (53) termino_operador -> . DIV factor termino_operador
    (54) termino_operador -> . MOD factor termino_operador
    (55) termino_operador -> . empty
    (65) empty -> .

    POR             shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    termino_operador               shift and go to state 118
    empty                          shift and go to state 81

state 108

    (54) termino_operador -> MOD factor . termino_operador
    (52) termino_operador -> . POR factor termino_operador
    (53) termino_operador -> . DIV factor termino_operador
    (54) termino_operador -> . MOD factor termino_operador
    (55) termino_operador -> . empty
    (65) empty -> .

    POR             shift and go to state 78
    DIV             shift and go to state 79
    MOD             shift and go to state 80
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    MAYOR           reduce using rule 65 (empty -> .)
    MENOR           reduce using rule 65 (empty -> .)
    DIFF            reduce using rule 65 (empty -> .)
    PUNCOM          reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)
    COMA            reduce using rule 65 (empty -> .)

    termino_operador               shift and go to state 119
    empty                          shift and go to state 81

state 109

    (56) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    MOD             reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 56 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 56 (factor -> PARIZQ expresion PARDER .)


state 110

    (35) condicion_if -> IF PARIZQ expresion PARDER bloque . PUNCOM
    (36) condicion_if -> IF PARIZQ expresion PARDER bloque . else_condicion PUNCOM
    (37) else_condicion -> . ELSE bloque

    PUNCOM          shift and go to state 120
    ELSE            shift and go to state 122

    else_condicion                 shift and go to state 121

state 111

    (38) condicion_while -> WHILE PARIZQ expresion PARDER bloque . PUNCOM

    PUNCOM          shift and go to state 123


state 112

    (30) escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 30 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 30 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 30 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    PRINT           reduce using rule 30 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 30 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)


state 113

    (33) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 33 (multiples_print -> COMA print_expresion .)


state 114

    (6) asignacion_id -> id DOSPUN . TIPO PUNCOM asignacion_id
    (13) TIPO -> . INT
    (14) TIPO -> . FLOAT
    (15) TIPO -> . BOOL

    INT             shift and go to state 37
    FLOAT           shift and go to state 38
    BOOL            shift and go to state 39

    TIPO                           shift and go to state 124

state 115

    (48) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 48 (exp_operacion -> MAS termino exp_operacion .)


state 116

    (49) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 49 (exp_operacion -> MENOS termino exp_operacion .)


state 117

    (52) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 52 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 52 (termino_operador -> POR factor termino_operador .)


state 118

    (53) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 53 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 53 (termino_operador -> DIV factor termino_operador .)


state 119

    (54) termino_operador -> MOD factor termino_operador .

    MAS             reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    MENOS           reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    MAYOR           reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    MENOR           reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    DIFF            reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    PUNCOM          reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    AND             reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    OR              reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    PARDER          reduce using rule 54 (termino_operador -> MOD factor termino_operador .)
    COMA            reduce using rule 54 (termino_operador -> MOD factor termino_operador .)


state 120

    (35) condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .

    ID              reduce using rule 35 (condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    IF              reduce using rule 35 (condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    WHILE           reduce using rule 35 (condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    PRINT           reduce using rule 35 (condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    LLAVDER         reduce using rule 35 (condicion_if -> IF PARIZQ expresion PARDER bloque PUNCOM .)


state 121

    (36) condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion . PUNCOM

    PUNCOM          shift and go to state 125


state 122

    (37) else_condicion -> ELSE . bloque
    (16) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 8

    bloque                         shift and go to state 126

state 123

    (38) condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .

    ID              reduce using rule 38 (condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .)
    IF              reduce using rule 38 (condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .)
    WHILE           reduce using rule 38 (condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .)
    PRINT           reduce using rule 38 (condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .)
    LLAVDER         reduce using rule 38 (condicion_while -> WHILE PARIZQ expresion PARDER bloque PUNCOM .)


state 124

    (6) asignacion_id -> id DOSPUN TIPO . PUNCOM asignacion_id

    PUNCOM          shift and go to state 127


state 125

    (36) condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .

    ID              reduce using rule 36 (condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    IF              reduce using rule 36 (condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    WHILE           reduce using rule 36 (condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    PRINT           reduce using rule 36 (condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    LLAVDER         reduce using rule 36 (condicion_if -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)


state 126

    (37) else_condicion -> ELSE bloque .

    PUNCOM          reduce using rule 37 (else_condicion -> ELSE bloque .)


state 127

    (6) asignacion_id -> id DOSPUN TIPO PUNCOM . asignacion_id
    (6) asignacion_id -> . id DOSPUN TIPO PUNCOM asignacion_id
    (7) asignacion_id -> . empty
    (3) id -> . ID acum_id
    (65) empty -> .

    ID              shift and go to state 10
    LLAVIZQ         reduce using rule 65 (empty -> .)

    id                             shift and go to state 92
    asignacion_id                  shift and go to state 128
    empty                          shift and go to state 94

state 128

    (6) asignacion_id -> id DOSPUN TIPO PUNCOM asignacion_id .

    LLAVIZQ         reduce using rule 6 (asignacion_id -> id DOSPUN TIPO PUNCOM asignacion_id .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 28 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 28 resolved as shift
WARNING: shift/reduce conflict for MAS in state 33 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 33 resolved as shift
WARNING: shift/reduce conflict for MAS in state 34 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 34 resolved as shift
WARNING: shift/reduce conflict for MAS in state 35 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 35 resolved as shift
WARNING: shift/reduce conflict for MAS in state 46 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 46 resolved as shift
WARNING: shift/reduce conflict for MAS in state 66 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 66 resolved as shift
WARNING: shift/reduce conflict for MAS in state 67 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 67 resolved as shift
WARNING: shift/reduce conflict for MAS in state 68 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 68 resolved as shift
WARNING: shift/reduce conflict for MAS in state 69 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 69 resolved as shift
WARNING: shift/reduce conflict for MAS in state 70 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 70 resolved as shift
WARNING: shift/reduce conflict for MAS in state 71 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 71 resolved as shift
WARNING: shift/reduce conflict for MAS in state 72 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 72 resolved as shift
WARNING: shift/reduce conflict for MAS in state 74 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 74 resolved as shift
WARNING: shift/reduce conflict for MAS in state 75 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 75 resolved as shift
WARNING: shift/reduce conflict for MAS in state 78 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 78 resolved as shift
WARNING: shift/reduce conflict for MAS in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 79 resolved as shift
WARNING: shift/reduce conflict for MAS in state 80 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 80 resolved as shift
WARNING: shift/reduce conflict for MAS in state 89 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
